#!/usr/bin/env node

var getDeps = require('../src/get-deps')
var apply = require('lift-result/apply')
var github = require('../src/github')
var writeFile = require('writefile')
var each = require('foreach/async')
var log = require('../src/logger')
var program = require('commander')
var fs = require('lift-result/fs')
var npm = require('../src/npm')
var Result = require('result')
var map = require('map/async')
var all = require('when-all')
var rm = require('rm-r/sync')
var install = require('..')
var path = require('path')
var format = log.format

// enable basic info

log.enable('info')

var home = process.env.HOME+'/.packin'
var cwd = process.cwd()

// load default config

var defaults = fs.existsSync(home+'/config.json')
	? require(home+'/config.json')
	: {}
'folder' in defaults || (defaults.folder = 'deps')
'meta' in defaults   || (defaults.meta = ['deps.json', 'component.json', 'package.json'])

program
	.version(require('../package').version)
	.option('-v, --verbose', 'turn up the logging')

program.on('verbose', function(){
	log.enable('debug')
})

program
	.command('add <key:url>')
	.description('add a package to this packages dependencies')
	.option('-d, --development', 'add as a development dependency')
	.on('--help', function(){
		print('  Examples:')
		print('')
		print('    # explicit')
		print('    $ packin add graph:http://github.com/jkroso/graph/tarball/master')
		print('')
		print('    # from github')
		print('    $ packin add jkroso/graph')
		print('')
	})
	.action(function(kv, opts){
		parseKeyValue(kv).read(function(kv){
			add(kv[0], kv[1], opts)
		})
	})

program
	.command('update [dep]')
	.description('update deps to their latest release')
	.action(function(dep){
		var json = getJSON()
		var pending = 0
		if (dep) {
			var deps = json.production && dep in json.production
				? json.production
				: json.development
			if (!(dep in deps)) throw new Error(dep + ' not installed')
			return apply(update(deps[dep], dep), function(url){
				deps[dep] = url
			}).read(function(){
				saveJSON(json)
				clearLine()
			})
		}
		if (json.production) json.production = map(json.production, update)
		if (json.development) json.development = map(json.development, update)
		all(json).read(function(json){
			saveJSON(json)
			clearLine()
		})

		function update(url, key){
			if (/github\.com\/([^\/]+)\/([^\/]+)\/tarball\/(.*)/.test(url)) {
				var user = RegExp.$1
				var repo = RegExp.$2
				var oldtag = RegExp.$3
				clearLine()
				writePending(++pending)
				return github.tag(user, repo).then(function(tag){
					var id = user + '/' + repo
					logUpdate(id, oldtag, tag)
					return 'http://github.com/' + id + '/tarball/' + tag
				})
			}
			if (/registry\.npmjs\.org\/([^\/]+)\/-\/[^\/]+-(.+)\.tgz/.test(url)) {
				var id = RegExp.$1
				var tag = RegExp.$2
				clearLine()
				writePending(++pending)
				return npm.tag(id, '>=' + tag).then(function(latest){
					logUpdate(id, tag, latest)
					return 'http://registry.npmjs.org/'+id+'/-/'+id+'-'+latest+'.tgz'
				})
			}
			return url
		}

		function logUpdate(id, old, now){
			clearLine()
			if (old != now) {
				log.info(id, '%s -> %s', old, now)
			} else {
				log.info(id, '%s', old)
			}
			writePending(--pending)
		}
	})


function writePending(pending){
	process.stdout.write(blue('\r Â» ' + pending + ' pending'))
}

function clearLine(){
	process.stdout.write('\033[2K\033[0G')
}

program
	.command('url <shorthand>')
	.description('expand shorthand to a full url')
	.action(function(short){
		parseKeyValue(short).read(function(url){
			console.log(url[1])
		})
	})

function parseKeyValue(kv){
	/([-.\w\/@]+)(?::([-.\w\/@]+))?/.exec(kv)
	if (RegExp.$2) {
		var key = RegExp.$1
		var value = RegExp.$2
	} else {
		var value = RegExp.$1
	}

	// local package
	if (/^\.|^\//.exec(value)) {
		value = path.resolve(value)
		return Result.wrap([key || path.basename(value), value])
	}

	// github shorthand
	if (/^([-.\w]+)\/([-.\w]+)(?:@(.*))?$/.exec(value)) {
		var url = 'http://github.com/'+RegExp.$1+'/'+RegExp.$2+'/tarball/'
		var user = RegExp.$1
		var repo = RegExp.$2
		var tag = RegExp.$3
		if (!key) key = repo
		if (tag) return Result.wrap([key, url + tag])
		return github.tag(user, repo).then(function(tag){
			return [key, url + tag]
		})
	}

	// npm.org
	if (/^(.+)(?:@(.*))?$/.exec(value)) {
		var pkg = RegExp.$1
		var version = RegExp.$2 || '*'
		return npm.url(pkg, version).then(function(url){
			return [pkg, url]
		})
	}
}

function getJSON(file){
	file || (file = cwd + '/deps.json')
	if (!fs.existsSync(file)) return {}
	return JSON.parse(fs.readFileSync(file, 'utf8'))
}

function saveJSON(json, file){
	file || (file = cwd + '/deps.json')
	fs.writeFileSync(file, JSON.stringify(json, null, 2))
}

/**
 * add an entry to the deps.json file
 *
 * @param {String} key
 * @param {String} url
 * @param {Object} opts
 */

function add(key, url, opts){
	var file = cwd + '/deps.json'
	var json = getJSON(file)

	// --development
	if (opts.development) {
		var deps = json.development || (json.development = {})
	} else {
		var deps = json.production || (json.production = {})
	}

	log.info(key, url)
	deps[key] = url
	saveJSON(json, file)
}

program
	.command('ls')
	.description('show dependencies')
	.option('-f, --folder <dir>', 'dependency directory', defaults.folder)
	.action(function(opts){
		var dev = getDeps(cwd, {
			files: defaults.meta,
			development: true
		})
		var pro = getDeps(cwd, {
			files: defaults.meta,
			production: true
		})
		apply(dev, pro, function(development, production){
			print('')
			show('production', production)
			show('development', development)

			function show(key, obj){
				var keys = Object.keys(obj)
				if (!keys.length) return
				print(format('  %s', blue(key)))
				keys.forEach(function(key){
					var url = obj[key]
					if (/github\.com\/([^\/]+)\/([^\/]+)\/tarball\/(.+)/.test(url)) {
						url = RegExp.$1 + '/' + RegExp.$2 + '@' + RegExp.$3
					}
					if (/registry\.npmjs\.org\/[^\/]+\/-\/(.*)-(.*)\.tgz/.test(url)) {
						url = RegExp.$1 + '@' + RegExp.$2
					}
					print(format('    %s %p', blue(key), url))
				})
				print('')
			}
		}).read()
	})

function blue(text){
	return '\033[36m' + text + '\033[m'
}

program
	.command('rm <key>')
	.description('remove a package from this packages dependencies')
	.option('-d, --development', 'add as a development dependency')
	.option('-f, --folder <dir>', 'dependency folder', defaults.folder)
	.action(function(name, opts){
		var pkg = cwd + '/deps.json'
		var json = require(pkg)
		var deps = opts.development
			? json.development
			: json.production
		if (deps && name in deps) {
			delete deps[name]
			var file = cwd + '/' + program.folder + '/' + name
			try { fs.unlinkSync(file) }
			catch (e) {}
			fs.writeFileSync(pkg, JSON.stringify(json, null, 2))
		}
	})

program
	.command('install')
	.description('install this packages dependencies')
	.option('-d, --development', 'install development dependencies')
	.option('-p, --production', 'install production dependencies')
	.option('-f, --folder <dir>', 'name of the directory for installed packages', defaults.folder)
	.option('-m, --meta <files>', 'list of meta files to read', list, defaults.meta)
	.option('-R, --no-retrace', 'don\'t step into existing dependencies')
	.option('-c, --clean', 'remove unused dependencies')
	.on('--help', function () {
		print('  Examples:')
		print('')
		print('    # to emulate npm install')
		print('    $ packin install -m package.json')
		print('')
		print('    # to use components and npm packages')
		print('    $ packin install -m component.json,package.json')
		print('')
	})
	.action(function(options){
		if (fs.existsSync(options.folder)) {
			if (options.clean) rm(options.folder) // rm(1) -r
			else fs.utimesSync(options.folder, new Date, new Date) // touch(1)
		}

		var opts = {
			folder: options.folder,
			files: options.meta,
			log: Object.create(null),
			development: options.development,
			production: options.production,
			retrace: options.retrace
		}

		// bind error handling to 'exit' in case
		// the process is interupted
		process.on('exit', cleanup)
		function cleanup(code, sig){
			console.log('  Exited early with code:%s', code)
			each(opts.log, function(dep){
				if (dep.isNew) rm(dep.location)
			})
		}

		install(cwd, opts).read(function(log){
			process.removeListener('exit', cleanup)
		})
	})

program.parse(process.argv)

if (!program.args.length) program.help()

function list (args) {
	return args.split(',')
}

function print(txt){
	process.stdout.write(txt+'\n')
}
