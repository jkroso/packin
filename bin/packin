#!/usr/bin/env node

var program = require('commander')
  , install = require('../src/install')
  , fs = require('fs')
  , ghtag = require('github-latest')
  , writeFile = require('writefile')
  , path = require('path')
  , mkdirp = require('mkdirp')
  , log = require('../src/logger')

// enable basic info

log.enable('info')

var home = process.env.HOME+'/.packin'
var locals = home + '/locals.json'
var cwd = process.cwd()

// load default config

var cfg = fs.existsSync(home+'/config.json')
	? require(home+'/config.json')
	: {}
if (!('target' in cfg)) cfg.target = 'dev'
if (!('meta' in cfg)) cfg.meta = ['deps.json', 'component.json', 'package.json']
if (!('dev' in cfg)) cfg.dev = true

program
	.version(require('../package').version)
	.option('-v, --verbose', 'turn up the logging')

program.on('verbose', function(){
	log.enable('debug')
})

program
	.command('add <key:url>')
	.description('add a package to this packages dependencies')
	.option('-d, --development', 'add as a development dependency')
	.on('--help', function(){
		print('  Examples:')
		print('')
		print('    # explicit')
		print('    $ packin add graph:http://github.com/jkroso/graph/tarball/master')
		print('')
		print('    # from github')
		print('    $ packin add jkroso/graph')
		print('')
	})
	.action(function(kv, opts){
		/([-.\w\/@]+)(?::([-.\w\/@]+))?/.exec(kv)
		if (RegExp.$2) {
			var key = RegExp.$1
			var value = RegExp.$2
		} else {
			var value = RegExp.$1
		}
		var pkg = cwd + '/deps.json'
		var json = fs.existsSync(pkg)
			? require(pkg)
			: {}

		// --development
		if (opts.development) {
			var deps = json.development || (json.development = {})
		} else {
			var deps = json.production || (json.production = {})
		}

		// github shorthand
		if (/^([-.\w]+)\/([-.\w]+)(?:@([-.\w]+|\d+\.\d+\.\d+))?$/.exec(value)) {
			value = 'http://github.com/'+RegExp.$1+'/'+RegExp.$2+'/tarball/'
			if (!key) key = RegExp.$2
			if (RegExp.$3) {
				value += RegExp.$3
				save()
			} else {
				ghtag(RegExp.$1, RegExp.$2, function(e, tag){
					if (e) log.info('error', 'unable to find the latest tag')
					value += (tag || 'master')
					save()
				})
			}
		}

		function save(){
			log.info(key, value)
			deps[key] = value
			fs.writeFileSync(pkg, JSON.stringify(json, null, 2))
		}
	})

program
	.command('ls')
	.description('display this packages dependencies')
	.action(function(){
		var pkg = cwd + '/deps.json'
		var deps = require(pkg)
		console.log()
		show(deps.production)
		show(deps.development)
		function show(obj){
			if (!obj) return
			var keys = Object.keys(obj)
			if (!keys.length) return
			keys.forEach(function(key){
				log.info(key, obj[key])
			})
			console.log()
		}
	})

program
	.command('rm <key>')
	.description('remove a package from this packages dependencies')
	.option('-d, --development', 'add as a development dependency')
	.option('-t, --target <dir>', 'dependency folder', cfg.target)
	.action(function(name, opts){
		var pkg = cwd + '/deps.json'
		var json = require(pkg)
		var deps = opts.development
			? json.development
			: json.production
		if (deps && name in deps) {
			delete deps[name]
			var file = cwd + '/' + program.target + '/' + name
			try { fs.unlinkSync(file) }
			catch (e) {}
			fs.writeFileSync(pkg, JSON.stringify(json, null, 2))
		}
	})


program
	.command('install')
	.description('install this packages dependencies')
	.option('-d, --no-dev', 'ignore development dependencies', !cfg.dev)
	.option('-t, --target <dir>', 'name of the directory for installed packages', cfg.target)
	.option('-m, --meta <files...>', 'list of meta files to read', list, cfg.meta)
	.on('--help', function () {
		print('  Examples:')
		print('')
		print('    # to emulate npm')
		print('    $ packin install -m package.json -t node_modules')
		print('')
		print('    # to use components with browserify')
		print('    $ packin install -m component.json,package.json -t node_modules')
		print('')
	})
	.action(function(opts){
		install(cwd, {
			priority: opts.meta,
			dev: opts.dev,
			folder: opts.target
		}).throw()
	})

program
	.command('as [name]')
	.description('create a shortcut to this local package')
	.action(function(name, opts){
		if (!name) name = path.basename(cwd).toLowerCase()
		var locals = getLocals()
		if (name in locals && locals[name] != cwd)
			return print(name+' is currently assigned to '+locals[name]) 
		locals[name] = cwd
		saveLocals(locals)
	})

program
	.command('unas [name]')
	.description('clear the local path for <name>')
	.action(function(name){
		if (!name) name = path.basename(cwd).toLowerCase()
		var locals = getLocals();
		delete locals[name]
		saveLocals(locals)
	})

function getLocals(){
	return fs.existsSync(locals)
		? require(locals)
		: {}
}

function saveLocals(obj){
	writeFile(locals, JSON.stringify(obj, null, 2))
}

program
	.command('locals')
	.description('list local packages')
	.action(function(){
		var locals = getLocals()
		var keys = Object.keys(locals)
		if (!keys.length) return print('none to show')
		print('')
		keys.forEach(function(key){
			var path = locals[key]
			path = path.replace(process.env.HOME, '~')
			print('  ' + key + ': ' + path)
		})
		print('')
	})

program
	.command('link <local>')
	.description('install a local package')
	.option('-t, --target <dir>', 'name of the directory for installed packages', cfg.target)
	.action(function(name, opts){
		var locals = getLocals()
		if (!(name in locals)) return print(name+' is not registered')
		var deps = cwd + '/' + opts.target
		mkdirp.sync(deps)
		fs.symlinkSync(locals[name], deps+'/'+name)
	})

program.parse(process.argv)

if (!program.args.length) program.help()

function list (args) {
	return args.split(',')
}

function print(txt){
	process.stdout.write(txt+'\n')
}
